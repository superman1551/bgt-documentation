<html>
<head>
<style type="text/css">
<!--
a:link {
	text-decoration: none;
	color: blue;
}

a:visited {
	text-decoration: none;
	color: blue;
}

a:hover, a:active {
	text-decoration: underline;
	color: blue;
}
-->
</style>
<title>Function Reference</title>
</head>
<body>
<br>
<b>mouse_down</b><br>
<br>
This function checks if a particular mouse button is currently being held down.<br>
<br>
bool mouse_down(int button)<br>
<br>
Parameters:<br>
button<br>
A mouse button number from 0 to 7 (see remarks).<br>
<br>
Return value:<br>
true if the button is held down, false if it is not or if an error occurs.<br>
<br>
Remarks:<br>
The difference between mouse_down and mouse_pressed is that mouse_pressed will only return true when the user first pushes down the button, while mouse_down will continue returning true until the button is released again.<br>
<br>
The button number can be between 0 and 7, however not many mouse devices will have as many as 8 buttons. The numbers correspond to the following buttons:<br>
<ul>
<li>0 - Left button.</li>
<li>1 - Right button.</li>
<li>2 - Middle button.</li>
<li>3 - Button 4.</li>
<li>4 - Button 5.</li>
<li>5 - Button 6.</li>
<li>6 - Button 7.</li>
<li>7 - Button 8.</li>
</ul>
<br>
Example:<br>
<pre>
// Play a looping sound while the left mouse button is held down, and use escape to close.

void main()
{
show_game_window("Test Game");
sound horn;
horn.load("horn.wav");
if(horn.active==false)
{
alert("Error", "The sound could not be loaded.");
exit();
}
while(true)
{
mouse_update();
if(mouse_down(0))
{
if(horn.playing==false)
{
horn.play_looped();
}
}
else
{
if(horn.playing==true)
{
horn.stop();
}
}
if(key_pressed(KEY_ESCAPE))
{
exit();
}
wait(5);
}
}
</pre>
</body>
</html>