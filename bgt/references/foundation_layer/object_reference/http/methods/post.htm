<html>
<head>
<style type="text/css">
<!--
a:link {
	text-decoration: none;
	color: blue;
}

a:visited {
	text-decoration: none;
	color: blue;
}

a:hover, a:active {
	text-decoration: underline;
	color: blue;
}
-->
</style>
<title>post</title>
</head>
<body>
<br>
<b>http object</b><br>
<br>
This method initiates the retrieval of a URL from the Internet.<br>
<br>
string post(string url, string parameters)<br>
<br>
Parameters:<br>
url<br>
The URL of the file on the Internet that should be retrieved.<br>
parameters<br>
The parameters that should be passed to the server.<br>
<br>
Return value:<br>
A blank string on success, or an error description or blank string on failure (see remarks).<br>
<br>
Remarks:<br>
This method will send what is known as a POST request. A POST request is used in those cases where the data you are sending is longer than is feasible with a GET request.<br>
<br>
The URL may not contain any special characters such as spaces or similar. If you wish to include such characters, always encode the URL by calling the encode function before attempting to retrieve it from the Internet.<br>
<br>
If the http server to which the URL points uses a port other than 80, you will need to include the port after the host name proceeded by a colon. The path on the server (if any) should then follow, proceeded by a slash. Such a URL might look like http://myserver.com:8080/myfile.html.<br>
<br>
If multiple requests are made with URL's pointing to the same server, the http object will attempt to keep the connection alive for a short while which results in a dramatic speed increase for subsequent requests.<br>
<br>
If the network subsystem fails to initialize, the get_last_error function will return -27 and the returned string will be blank.<br>
<br>
If an Internet related error occurs, the get_last_error function will return -29 and the returned string will contain a textual description of the error. This means that you should always call get_last_error after initiating a request.<br>
<br>
This method can be used to retrieve both binary and textual data.<br>
<br>
The http object is asynchronous, which means that it does not wait for any data before returning. To retrieve data from the server, you must continuously call the request method until the progress boolean property reports false.<br>
<br>
Example:<br>
<pre>
// Post some data to a dummy site.

void main()
{
http download;
string body=download.post("http://www.mysite.com/test.php", "Data=Test&ID=495&Name=Example");
if(get_last_error()!=0)
{
alert("Error", "An error occured.\r\nDescription: " + body + "");
}
else
{
while(download.progress)
{
body+=download.request();
wait(5);
}
clipboard_copy_text(body);
alert("Success", "The data was retrieved and has been copied to your clipboard.");
}
}
</pre>
</body>
</html>