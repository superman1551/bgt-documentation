<html>
<head>
<style type="text/css">
<!--
a:link {
	text-decoration: none;
	color: blue;
}

a:visited {
	text-decoration: none;
	color: blue;
}

a:hover, a:active {
	text-decoration: underline;
	color: blue;
}
-->
</style>
<title>sound_is_active</title>
</head>
<body>
<br>
<b>sound_pool object</b><br>
<br>
This method checks to see whether a given slot contains a valid sound.<br>
<br>
bool sound_is_active(int slot)<br>
<br>
Parameters:<br>
slot<br>
The slot of a sound, as returned by one of the play methods.<br>
<br>
Return value:<br>
True if the slot contains an active sound, false otherwise.<br>
<br>
Remarks:<br>
This is useful if you want to check which sounds you are able to successfully modify before changing any of their properties or positions.<br>
<br>
Please note: When dealing with sound slots, be sure that you set the persistent flag to true for all non-looping sounds when you first create them. If you fail to do this, manipulating a sound in any way by use of its slot number can have unpredictable results. This is because the sound pool automatically cleans up any sound that has finished playing and that is not set to be persistent, with the result that the slot that was returned on creation is no longer invalid and may, in the worst case scenario, refer to a completely different sound.<br>
<br>
Example:<br>
<pre>
#include "sound_pool.bgt"

sound_pool sounds;

void main()
{
sounds.max_distance=70;
int slot=sounds.play_1d("sounds/test.wav", 0, 20, true);
if(sounds.sound_is_active(slot))
{
alert("information", "slot "+slot+" is currently active.");
}
else
{
alert("information", "slot "+slot+" is not currently active.");
}
}
</pre>
</body>
</html>