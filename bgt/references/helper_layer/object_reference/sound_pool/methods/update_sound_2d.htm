<html>
<head>
<style type="text/css">
<!--
a:link {
	text-decoration: none;
	color: blue;
}

a:visited {
	text-decoration: none;
	color: blue;
}

a:hover, a:active {
	text-decoration: underline;
	color: blue;
}
-->
</style>
<title>update_sound_2d</title>
</head>
<body>
<br>
<b>sound_pool object</b><br>
<br>
This method will update the position of a sound on a 2d grid.<br>
<br>
bool update_sound_2d(int slot, int x, int y)<br>
<br>
Parameters:<br>
slot<br>
The slot of the sound to update.<br>
x<br>
The new X position of the sound.<br>
y<br>
The new Y position of the sound.<br>
<br>
Return value:<br>
true on success, false on failure.<br>
<br>
Remarks:<br>
This method will update the position of individual sounds. To update all the sounds based on the listener's position, use the update_listener methods instead.<br>
<br>
Please note: When dealing with sound slots, be sure that you set the persistent flag to true for all non-looping sounds when you first create them. If you fail to do this, manipulating a sound in any way by use of its slot number can have unpredictable results. This is because the sound pool automatically cleans up any sound that has finished playing and that is not set to be persistent, with the result that the slot that was returned on creation is no longer invalid and may, in the worst case scenario, refer to a completely different sound.<br>
<br>
Example:<br>
<pre>
#include "sound_pool.bgt"

sound_pool sounds;
timer move_timer;

int x, y;

void main()
{
sounds.max_distance=70;
sounds.behind_pitch_decrease=5;
x=0;
y=40;
int slot=sounds.play_2d("sounds/loop.wav", 20, 20, x, y, true);
while(true)
{
if(move_timer.elapsed>=200)
{
move_timer.restart();
x++;
y--;
sounds.update_sound_2d(slot, x, y);
}
if(x>=40)
{
exit();
}
}
}
</pre>
</body>
</html>